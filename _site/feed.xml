<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://anthernet.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://anthernet.com/" rel="alternate" type="text/html" /><updated>2018-10-29T00:01:23-04:00</updated><id>http://anthernet.com/feed.xml</id><title type="html">anthernet</title><subtitle>coding resources // decentralized solutions // digital freedom
</subtitle><author><name>{&quot;github&quot;=&gt;&quot;tonyynot&quot;, &quot;twitter&quot;=&gt;&quot;tonecodes&quot;}</name></author><entry><title type="html">Link Dump 09 // Tech YouTubers Worth Following</title><link href="http://anthernet.com/blog/link-dump-09/" rel="alternate" type="text/html" title="Link Dump 09 // Tech YouTubers Worth Following" /><published>2018-06-08T20:18:23-04:00</published><updated>2018-06-08T20:18:23-04:00</updated><id>http://anthernet.com/blog/link-dump-09</id><content type="html" xml:base="http://anthernet.com/blog/link-dump-09/">&lt;p&gt;YouTube’s increasing problem of demonetization and censorship has created a demand for decentralized video sharing platforms such as &lt;a href=&quot;https://d.tube/&quot;&gt;DTube&lt;/a&gt;, &lt;a href=&quot;https://www.bitchute.com/&quot;&gt;BitChute&lt;/a&gt; and &lt;a href=&quot;http://www.flixxo.com/&quot;&gt;Flixxo&lt;/a&gt;. However, it goes without saying that until one of these platforms really takes off, YouTube is still king for finding the best video content on the web. It’s also a great source for learning about technology and computing among everything else you can learn for free on YouTube. But we are just here for the nerdy stuff, right? So for this link dump I thought I’d share some of my favorite tech YouTubers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/Computerphile&quot;&gt;Computerphile&lt;/a&gt;&lt;br /&gt;
Very informative videos on encryption, hacking, cyber security, and the history of computing. New videos are posted about 2 or 3 times a week, so there is plenty of interesting content to dive into.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/LinusTechTips&quot;&gt;Linus Tech Tips&lt;/a&gt;&lt;br /&gt;
You may have already heard of Linus Tech Tips, its a very popular channel with over 6 million subscribers. But perhaps I am late to the party, as I just recently have been spending time watching more of his videos as I get more into PC hardware and custom builds.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/ChrisWereDigital/videos&quot;&gt;Chris Were&lt;/a&gt;&lt;br /&gt;
A much lesser known channel compared to the others listed here, but nevertheless has served as an educational resource for me as I have been exploring the world of Linux distributions. Chris offers solid reviews and critiques of various Linux distros which can save you some time before going through the trouble of testing them out yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCvrLvII5oxSWEMEkszrxXEA&quot;&gt;N-O-D-E&lt;/a&gt;&lt;br /&gt;
Last but not least, N-O-D-E is a resource for sharing both hardware and software hacks, new rogue technologies, gadgets, decentralized solution and optimizing privacy and infosec.&lt;/p&gt;</content><author><name>Anthony Ramella</name></author><summary type="html">YouTube’s increasing problem of demonetization and censorship has created a demand for decentralized video sharing platforms such as DTube, BitChute and Flixxo. However, it goes without saying that until one of these platforms really takes off, YouTube is still king for finding the best video content on the web. It’s also a great source for learning about technology and computing among everything else you can learn for free on YouTube. But we are just here for the nerdy stuff, right? So for this link dump I thought I’d share some of my favorite tech YouTubers.</summary></entry><entry><title type="html">Link Dump 08 // Cryptography &amp;amp; Security Repositories</title><link href="http://anthernet.com/blog/link-dump-08/" rel="alternate" type="text/html" title="Link Dump 08 // Cryptography &amp;amp; Security Repositories" /><published>2018-01-15T19:10:21-05:00</published><updated>2018-01-15T19:10:21-05:00</updated><id>http://anthernet.com/blog/link-dump-08</id><content type="html" xml:base="http://anthernet.com/blog/link-dump-08/">&lt;p&gt;Over the years I’ve spent browsing Github, I have found a number of great resources and usages of open source documentation. Some of the collections and lists that I found more interesting were typically security or cryptography related, so I thought I’d share some of these great resources here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sobolevn/awesome-cryptography&quot;&gt;Awesome Cryptography&lt;/a&gt;&lt;br /&gt;
A curated list of cryptography resources and links.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/grepx/android-clipboard-security/blob/master/README.md&quot;&gt;Android Clipboard Security Vulnerability&lt;/a&gt;&lt;br /&gt;
Here’s a project that demonstrates a security flaw in Android’s API that allows any installed application to listen to copy &amp;amp; paste actions on the clipboard. Reminder never to copy &amp;amp; paste your private keys using your device.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tombusby/cypherpunk-research&quot;&gt;Cypherpunk Research&lt;/a&gt;&lt;br /&gt;
This is a repository dedicated to compiling information about Cypherpunks, the history of the movement, and the people/events of note.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/drduh/macOS-Security-and-Privacy-Guide&quot;&gt;macOS Security &amp;amp; Privacy Guide&lt;/a&gt;&lt;br /&gt;
This is a guide for macOS power users who wish to adopt enterprise-standard security, but is also suitable for novice users with an interest in improving their privacy and security on a Mac.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Hack-with-Github/Awesome-Hacking&quot;&gt;Awesome Hacking&lt;/a&gt;&lt;br /&gt;
A huge collection of (awesome) lists for hackers, pentesters &amp;amp; security researchers.&lt;/p&gt;</content><author><name>Anthony Ramella</name></author><summary type="html">Over the years I’ve spent browsing Github, I have found a number of great resources and usages of open source documentation. Some of the collections and lists that I found more interesting were typically security or cryptography related, so I thought I’d share some of these great resources here.</summary></entry><entry><title type="html">Facebook is an Exploitative, Dopamine Dealing Data Tyrant</title><link href="http://anthernet.com/blog/facebook-is-creepy/" rel="alternate" type="text/html" title="Facebook is an Exploitative, Dopamine Dealing Data Tyrant" /><published>2017-12-10T19:18:23-05:00</published><updated>2017-12-10T19:18:23-05:00</updated><id>http://anthernet.com/blog/facebook-is-creepy</id><content type="html" xml:base="http://anthernet.com/blog/facebook-is-creepy/">&lt;p&gt;Facebook’s lack of concern over user privacy has been an ongoing issue since its beginnings. In fact, Mark Zuckerberg has also had his fair share of alarming interviews where he was pressed about privacy issues. Perhaps the &lt;a href=&quot;https://www.youtube.com/watch?v=nXrKKwHmPz4&quot;&gt;most infamous Zuckerberg interview&lt;/a&gt; being from back in 2010 where he is visibly very uncomfortable when pressed on the issue of user privacy and personality profiling. On stage in front of a large crowd, he starts sweating, stuttering, avoids answering the question and if all of that doesn’t sound cringey enough, he eventually has to take off his blue Facebook hoodie after sweating like he’s being interrogated under a heat lamp.&lt;/p&gt;

&lt;p&gt;The problem is, Facebook simply does not have reason to value your privacy. All the information collected is given over to them willingly and what’s actually most valuable to them is more user data. It’s no wonder economists now regard data as being a &lt;a href=&quot;https://www.economist.com/news/leaders/21721656-data-economy-demands-new-approach-antitrust-rules-worlds-most-valuable-resource&quot;&gt;more valuable resource than oil&lt;/a&gt;. Between Facebook and Google, the two platforms have what amounts to a monopoly on personal data just by sheer population and volume of data collected with nearly 2 billion users each. They have access to more personal data than any centralized platform has ever had.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/Hp8rJVWC2a0?t=1m49s&quot;&gt;In a 2011 interview with RT&lt;/a&gt;, Julian Assange calmly stated that &lt;em&gt;“Facebook is the most appauling spying machine that has ever been invented. Here we have the world’s most comprehensive database about people, their relationships, names, current locations, addresses, communications with each other…all accessable to U.S. intelligence. Facebook [has] a built-in interface for U.S. intelligence to use and [they can] bring to bear legal and political pressure to [Facebook] and since it is costly for [Facebook] to hand out records one by one, they have automated the process.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Everyone should understand that when they are adding friends on Facebook, they are doing free work for U.S. intelligence agencies by building this database for them.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a recent inteview with Stanford, Facebook executive Chamath Palihapitiya revealed some more startling concerns about the increasingly invasive and creepy platform.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I think we have created tools that are ripping apart the social fabric of how society works. The short-term, dopamine-driven feedback loops we’ve created are destroying how society works. No civil discourse, no cooperation; misinformation, mistruth. You are being programmed”. &lt;a href=&quot;https://www.youtube.com/watch?v=PMotykw0SIk&amp;amp;feature=youtu.be&amp;amp;t=1282&quot;&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But let’s give the devil his due, the Facebook engineers know exactly what they are doing and have no intenet to stop. Sean Parker, Zuckerberg’s former partner and former president of Facebook, admitted in a recent interview that &lt;a href=&quot;https://www.axios.com/sean-parker-facebook-exploits-a-vulnerability-in-humans-2507917325.html&quot;&gt;Facebook was designed to exploit human vulnerability&lt;/a&gt;. In fact, what Parker revealed in his interview is nearly identical to what Palihapitiya said in his.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“That means that we needed to sort of give you a little dopamine hit every once in a while because someone liked or commented on a photo or a post or whatever … It’s a social validation feedback loop … You’re exploiting a vulnerability in human psychology … [The inventors] understood this, consciously, and we did it anyway.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But Facebook’s power doesn’t stop at being the largest spying machine ever invented and the most convenient and reliable dopamine dealer on the planet, they are also controlling the content that reaches it’s users. With a list that ranges from former Facebook employees admitting to &lt;a href=&quot;https://gizmodo.com/former-facebook-workers-we-routinely-suppressed-conser-1775461006&quot;&gt;censorship of conservative political news&lt;/a&gt;, &lt;a href=&quot;https://theintercept.com/2017/11/02/war-crimes-youtube-facebook-syria-rohingya/&quot;&gt;removing photo evidence of various war crimes&lt;/a&gt; and &lt;a href=&quot;https://www.recode.net/2017/10/1/16394288/facebook-russia-ads-congress-senate-house-mark-zuckerberg&quot;&gt;selling thousands of political propoganda ads&lt;/a&gt; to alleged Russian-based organizations, Facebook should by no means be regarded as a free and open exchange of information.&lt;/p&gt;

&lt;p&gt;Even more recently, civil liberties groups have raised concerns that Facebook is picking and choosing politician’s accounts to censor and delete at the request of the U.S. government. When asked about this issue, Facebook declined to explain why they delete certain accounts and not others. A spokeswoman for Facebook told the Guradian “We will continue to work with appropriate government authorities to ensure we meet our legal obligations and to explore options for complying with the law in a way that maximises free expression on our platform and keeps people safe.”&lt;a href=&quot;https://www.theguardian.com/us-news/2018/jan/04/facebook-chechnya-ramzan-kadyrov-political-censorship&quot;&gt;[source]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despite all these concerns, many people are still hesitant to leave Facebook since thats the primary point of contact with their family and friends. But those who have left the platform and are seeking alternatives, I would recommend checking out &lt;a href=&quot;https://www.minds.com/&quot;&gt;Minds&lt;/a&gt; and &lt;a href=&quot;https://steemit.com/&quot;&gt;Steemit&lt;/a&gt; which are both open source social media platform that have a built in rewards system allowing users to get paid with digital currency. This provides incentive to post quality content unlike Facebook where users are rewarded with a dopamine doses from generating some likes on attention seeking, low effort posts.&lt;/p&gt;

&lt;p&gt;*&lt;a href=&quot;https://www.marketwatch.com/story/the-shocking-things-you-reveal-about-yourself-when-you-like-things-on-facebook-2017-05-16&quot;&gt;Further reading&lt;/a&gt;&lt;/p&gt;</content><author><name>Anthony Ramella</name></author><summary type="html">Facebook’s lack of concern over user privacy has been an ongoing issue since its beginnings. In fact, Mark Zuckerberg has also had his fair share of alarming interviews where he was pressed about privacy issues. Perhaps the most infamous Zuckerberg interview being from back in 2010 where he is visibly very uncomfortable when pressed on the issue of user privacy and personality profiling. On stage in front of a large crowd, he starts sweating, stuttering, avoids answering the question and if all of that doesn’t sound cringey enough, he eventually has to take off his blue Facebook hoodie after sweating like he’s being interrogated under a heat lamp.</summary></entry><entry><title type="html">5 Cryptocurrencies to Look Out for in 2018</title><link href="http://anthernet.com/blog/blockchain-tech-in-2018/" rel="alternate" type="text/html" title="5 Cryptocurrencies to Look Out for in 2018" /><published>2017-12-08T19:18:23-05:00</published><updated>2017-12-08T19:18:23-05:00</updated><id>http://anthernet.com/blog/blockchain-tech-in-2018</id><content type="html" xml:base="http://anthernet.com/blog/blockchain-tech-in-2018/">&lt;p&gt;Cryptocurrencies are not only changing how we think about money, but how we use money on a daily basis. However, they are more than just a rising new asset class and nerdy alternatives to using paper money, they are also disruptive techologies that provide decentralized platforms and solutions in areas that have traditionally been controlled by central powers. With the total cryptocurrency market cap reaching $759 billion in 2017, the entire crypto market has been experiencing exponential growth with thousands of new cryptocurrencies that offer unique and promising solutions to current and future technology.&lt;/p&gt;

&lt;p&gt;So here are some cryptocoins to look out for in 2018, of course these are all highly speculative technologies in their early phase, as is any other blockchain tech. This is not to be taken as investment or financial advice by any means, consider it a glimpse into the future through some exciting projects that are emerging from this global market. I encourage all readers to make educated decisions when investing and to be sure you are familiar with the technologies, competition, criticisms, market demand and community for any crypto assets before deciding to invest.&lt;/p&gt;

&lt;h2 id=&quot;vechain-vet&quot;&gt;&lt;a href=&quot;https://www.vechain.com/#/&quot;&gt;VeChain&lt;/a&gt; [VET]&lt;/h2&gt;
&lt;p&gt;What VeChain aims to do is to build a distributed business ecosystem that is trustless and transparent. This eliminates the trust issue involved in business transactions between two parties. VeChain is the solution to verifying the authenticity of products in the food, beverage, agricultural and fashion industry by adding the products’ RFID to the blockchain. Since the blockchain is trustless and immutable, it cannot be altered or manipulated by a centralized source. It’s worth noting that VeChain has recently established a &lt;a href=&quot;https://cdn.vechain.com/vechain_national_government_partnership_guian_release.pdf&quot;&gt;national level partnership&lt;/a&gt; with the Chinese government in an effort to improve the quality of export goods.&lt;br /&gt;
Read more about VeChain &lt;a href=&quot;https://www.mycryptopedia.com/vechain-ven-explained/&quot;&gt;here&lt;/a&gt;&lt;br /&gt;
Read the non-white paper &lt;a href=&quot;https://cdn.vechain.com/vechain_ico_ideas_of_development_en.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;quantstamp-qsp&quot;&gt;&lt;a href=&quot;https://quantstamp.com/&quot;&gt;Quantstamp&lt;/a&gt; [QSP]&lt;/h2&gt;
&lt;p&gt;Quantstamp describes itself as being “the first scalable security-audit protocol designed to find vulnerabilities in Ethereum smart contracts.” The team is a group of PHD wielding engineers who’s mission is to help developers produce more reliable code through smart contract auditing, improving the overall security and verification of the smart contract infrastructure. This is a much needed service especially that there is an undeniable demand for as there are still some common vulnerabilites in Ethereum/Solidity. The more audits that are requested, the higher the value of the QSP tokens become since submitting a request requires purchasing QSP token.&lt;br /&gt;
Read more about Quantstamp &lt;a href=&quot;https://themerkle.com/what-is-quantstamp/&quot;&gt;here&lt;/a&gt;&lt;br /&gt;
Read the Quantstamp white paper &lt;a href=&quot;https://docsend.com/view/shcsmhe&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;omisego-omg&quot;&gt;&lt;a href=&quot;https://omisego.network/&quot;&gt;OmiseGo&lt;/a&gt; [OMG]&lt;/h2&gt;
&lt;p&gt;OmiseGo is a decentralized exchange built on a smart contract framework called &lt;a href=&quot;http://plasma.io/plasma.pdf&quot;&gt;Plasma&lt;/a&gt;, hosting an open-source digital wallet platform from &lt;a href=&quot;https://www.omise.co/&quot;&gt;Omise&lt;/a&gt;, connecting mainstream payments, cross-border remittances, and much more. OmiseGo is both fiat and crypto-friendly which will solve one of the main problems with entering the cryptocurrency market - easily trading altcoins without going through more than 1 exchange. OmiseGo is also cross-chain compatible, Ethereum based and “designed to enable financial inclusion and disrupt existing institutions”. Their slogan is “Unbank the Banked” as they aim to eliminate the need for corporate institutions acting as the middleman when making digital transactions.&lt;br /&gt;
Read more about OmiseGo &lt;a href=&quot;https://themerkle.com/what-is-omisego/&quot;&gt;here&lt;/a&gt;
Read the OmiseGo white paper &lt;a href=&quot;https://cdn.omise.co/omg/whitepaper.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nano-xrb&quot;&gt;&lt;a href=&quot;https://nano.co/&quot;&gt;Nano&lt;/a&gt; [XRB]&lt;/h2&gt;
&lt;p&gt;Nano can be best understood as what Bitcoin is supposed to be. It’s main usage is as a currency and with instant transactions, zero fees and infinite scalability, XRB is the most efficient coin on the market. The problem of scaling to mass adoption is an ongoing issue with many cryptocurrencies, most notoriously seen as the core issue behind the &lt;a href=&quot;https://www.wsj.com/articles/bitcoins-civil-war-what-you-need-to-know-1501508664&quot;&gt;Bitcoin civil war&lt;/a&gt; but RaiBlocks aims to solve this problem by making XRB ininitely scalable. With no transaction fees it makes XRB an ideal coin for both trading and commerce.&lt;br /&gt;
Read the Nano white paper &lt;a href=&quot;https://raiblocks.net/media/RaiBlocks_Whitepaper__English.pdf?source=techstories.org&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;request-network-req&quot;&gt;&lt;a href=&quot;https://request.network/#/&quot;&gt;Request Network&lt;/a&gt; [REQ]&lt;/h2&gt;
&lt;p&gt;Most of us already use Paypal or Venmo to request payments from others. Both these platforms rely on sharing banking information and relying on the bank or another 3rd party to approve the transactions, in turn taking anywhere from 1% - 6% in commission fees. Request Network offers a secure and decentralized p2p solution to this problem, bypassing banks and 3rd party mediators all together. Request Network is built on top of the Ethereum blockchain and is “designed to be flexible, last hundreds of years and work with IoT” according to their website.&lt;/p&gt;

&lt;p&gt;*Again, please note that I am not suggesting anyone invest in these technologies. If you are interested, do your own research and make educated investments.&lt;/p&gt;

&lt;p&gt;What coins will you be eyeing up next year and why? Let me know in the comments, I’d love to hear!&lt;/p&gt;</content><author><name>Anthony Ramella</name></author><summary type="html">Cryptocurrencies are not only changing how we think about money, but how we use money on a daily basis. However, they are more than just a rising new asset class and nerdy alternatives to using paper money, they are also disruptive techologies that provide decentralized platforms and solutions in areas that have traditionally been controlled by central powers. With the total cryptocurrency market cap reaching $759 billion in 2017, the entire crypto market has been experiencing exponential growth with thousands of new cryptocurrencies that offer unique and promising solutions to current and future technology.</summary></entry><entry><title type="html">Know Thy Browser - A Study on Web Browser Security &amp;amp; Privacy</title><link href="http://anthernet.com/blog/web-browser-privacy-and-security/" rel="alternate" type="text/html" title="Know Thy Browser - A Study on Web Browser Security &amp; Privacy" /><published>2017-09-14T20:18:23-04:00</published><updated>2017-09-14T20:18:23-04:00</updated><id>http://anthernet.com/blog/web-browser-privacy-and-security</id><content type="html" xml:base="http://anthernet.com/blog/web-browser-privacy-and-security/">&lt;h2 id=&quot;chrome&quot;&gt;&lt;a href=&quot;https://www.google.com/chrome/index.html&quot;&gt;Chrome&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;SECURITY: Google Chrome is a freeware browser based on the open-source &lt;a href=&quot;http://www.chromium.org/Home&quot;&gt;Chromium project&lt;/a&gt;. Some proprietary components have been added to optimize features such as upgrading, crash reports, a PDF viewer, media codec support and a randomly generated token that sends basic installation data back to Google. Although Chrome itself is not open-sourced, a nice feature is that Google does offer a very lucrative &lt;a href=&quot;https://www.google.com/about/appsecurity/chrome-rewards/&quot;&gt;bounty program&lt;/a&gt; for reporting vulnerabilities along with its own Project Zero. Recently, Google has made it so that Chrome now quietly &lt;a href=&quot;https://boingboing.net/2017/01/30/google-quietly-makes-optiona.html&quot;&gt;installs a mandatory DRM module&lt;/a&gt; without an option to disable it. This makes it difficult and dangerous for security researchers to investigate the possibility of vulnerabilities in Chrome &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=686430&quot;&gt;[more information]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PRIVACY: While Chrome offers some decent security features aside from the numeous plugins that should be added to enhance its security, it also has perhaps the worst reputation among popular web browsers in terms of privacy. Chrome comes installed with an RLZ identifier which sends an encoded string to Google used to measure promotional campaigns. This cannot be turned off as a setting, but Google kindly will provide the source code so you can decode it yourself! Also there is no word from Google whether RLZ can be disabled on mobile Chrome. The Chrome developers have also turned off the “Do Not Track” option which can and should be manually &lt;a href=&quot;https://support.google.com/chrome/answer/2790761&quot;&gt;turned on&lt;/a&gt; so your browsing data isn’t collected. According to Chrome’s privacy policy can be found &lt;a href=&quot;https://www.google.com/chrome/browser/privacy/index.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: If you must use Chrome as your primary browser, I would highly recommend creating separate profiles for certain browsing activity. One for browsing trusted sites, another for mostly trusted sites (with &lt;a href=&quot;https://www.superantispyware.com/blog/2017/05/10/our-top-5-google-chrome-extension-picks-for-better-web-security/&quot;&gt;these&lt;/a&gt; security enhancment extensions installed) and a third with JavaScript and cookies disabled for browsing untrusted sites.&lt;/p&gt;

&lt;h2 id=&quot;firefox&quot;&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;Firefox&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;SECURITY: Firefox lets you create different user profiles called &lt;a href=&quot;https://testpilot.firefox.com/experiments/containers&quot;&gt;containers&lt;/a&gt; which can be used in the same way as the previously suggested Chrome profiles. Since Firefox switched to HTTPS support, any login that doesn’t support HTTPS displays prompt in the password field reminding the user that their login could be compromised. On top of being free and open-sourced, Mozilla also offers a &lt;a href=&quot;https://www.mozilla.org/en-US/security/bug-bounty/&quot;&gt;bug bounty&lt;/a&gt; reward for Firefox.&lt;/p&gt;

&lt;p&gt;PRIVACY: Mozilla makes it very clear that they put a high priority on privacy. On top of being completely open source, Mozilla will not sell browsing data to other companies since they are a non-profit. Firefox uses &lt;a href=&quot;https://developer.mozilla.org/en-US/Firefox/Privacy/Tracking_Protection&quot;&gt;tracking protection&lt;/a&gt; during private sessions but it can be enabled on the default profile as well. Unfortunately, some previous versions of Firefox used a legacy web extension that offered a lot of freedom for developers at the expense of being quite invasive by introducing several vulnerabilities which are covered in &lt;a href=&quot;https://www.exploit-db.com/docs/24541.pdf&quot;&gt;this paper&lt;/a&gt;. Considering Firefox has limited protection out of the box compared to a browser like Brave or Tor, there are some addons that can greatly improve the browser’s security. It is recommended to use &lt;a href=&quot;https://github.com/TheCreeper/PrivacyFox&quot;&gt;TheCreeper/PrivacyFox&lt;/a&gt; to enhance privacy settings for Firefox.&lt;/p&gt;

&lt;p&gt;Read Mozilla’s privacy policy &lt;a href=&quot;https://www.mozilla.org/en-US/privacy/firefox/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;brave&quot;&gt;&lt;a href=&quot;https://www.brave.com/download/&quot;&gt;Brave&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;SECURITY: Brave is a browser founded by Brendan Eich, co-founder of the Mozilla Project and creator of JavaScript. Brave currently does not support addons or plugins, but it offers plenty of attractive built-in features. It comes with encrypted communication out of the box via &lt;a href=&quot;https://www.eff.org/https-everywhere&quot;&gt;HTTPS Everywhere&lt;/a&gt;, which needs to be downloaded separately as an add-on for other browsers. Some other great default security features are password manager support, ad-blocking, tracker blocking and anti-phishing protection.&lt;/p&gt;

&lt;p&gt;PRIVACY: Braves makes the list of 3 browsers recommended by &lt;a href=&quot;https://www.privacytools.io/#browser&quot;&gt;privacytools.io&lt;/a&gt;, which makes it worth a serious look. A notable feature that Brave has is &lt;a href=&quot;https://torrentfreak.com/brave-a-privacy-focused-browser-with-built-in-torrent-streaming-170219/&quot;&gt;WebTorrent integration&lt;/a&gt; for built in streaming. Brave makes W3C &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_rights_management&quot;&gt;DRM&lt;/a&gt; optional by allowing users to &lt;a href=&quot;https://news.ycombinator.com/item?id=13519006&quot;&gt;disable it&lt;/a&gt; and even gives a warning about using it. Besides free ad-blocking, what really sets Brave apart from other browsers is that it allows users to collect micro-donations called &lt;a href=&quot;https://brave.com/faq/#brave-payments&quot;&gt;Brave Payments&lt;/a&gt;, rewarding users with &lt;a href=&quot;https://basicattentiontoken.org/&quot;&gt;Basic Attention Token&lt;/a&gt; (BAT).&lt;/p&gt;

&lt;p&gt;“BAT will allow publishers, advertisers, and users to connect in an online environment that reduces fraud, privacy violations and “malvertisements” while increasing publisher revenue.&lt;a href=&quot;https://www.cryptocoinsnews.com/brave-announces-blockchain-digital-advertising-platform-with-ethereum-based-token-rewards-for-users/&quot;&gt;1&lt;/a&gt;” BAT offers an anonymous and private p2p ad-tech solution for collecting rich user metrics by eliminating 3rd party intermediaries and rewarding all who participate.&lt;/p&gt;

&lt;h2 id=&quot;tor-browser&quot;&gt;&lt;a href=&quot;https://www.torproject.org/projects/torbrowser.html&quot;&gt;Tor Browser&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;TOR (short for The Onion Router) really deserves it’s own writeup, but here’s the quick rundown. Tor Browser is the flagship application of The Tor Project and as far as browsing goes, it is the undisputed king when it comes to privacy, security and anonymity. It uses a tech developed by U.S. Naval Research Labratory employees in the 90’s called “onion routing”, which implements encrypted nested application layers over the user’s network connection.&lt;/p&gt;

&lt;p&gt;SECURITY: As stated on the Tor Project website, “[Tor] protects you by bouncing your communications around a distributed network of relays run by volunteers all around the world”. Tor is so secure that the FBI could not even locate or de-anonymize the Tor user who hacked into the Hillary Clinton email server. Ultimately, any vulnerabilities come down to how browser is configured and used. A good start would be referring to &lt;a href=&quot;https://www.torproject.org/docs/documentation.html.en&quot;&gt;Tor’s documentation&lt;/a&gt; on installing and configuring Tor for optimal security.&lt;/p&gt;

&lt;p&gt;PRIVACY: Once again, Tor Browser is the king when it comes to privacy browsers and anonymity and even &lt;a href=&quot;https://www.theguardian.com/world/2013/oct/04/nsa-gchq-attack-tor-network-encryption&quot;&gt;the NSA agrees&lt;/a&gt;. However, it’s not a perfect solution. &lt;a href=&quot;https://nakedsecurity.sophos.com/2015/06/25/can-you-trust-tors-exit-nodes/&quot;&gt;Naked Security points out&lt;/a&gt; that Tor had been mistakenly used as an end-to-end encryption tool, which is certainly is not. Basically, no matter how many nodes are relayed together, traffic must eventually escape the network through exit nodes. Years before Snowden, a Sweedish computer consultant named Dan Egerstad was able to leak hundreds of confidential government emails by using a packet sniffer aimed at POP3 and IMAP traffic coming through &lt;a href=&quot;http://www.zdnet.com/article/sensitive-government-e-mails-leak-through-tor-exit-nodes/&quot;&gt;Tor exit nodes&lt;/a&gt;.&lt;/p&gt;</content><author><name>Anthony Ramella</name></author><summary type="html">Chrome</summary></entry><entry><title type="html">Building a Twitter Bot with Node.js</title><link href="http://anthernet.com/blog/build-a-twitterbot-with-node/" rel="alternate" type="text/html" title="Building a Twitter Bot with Node.js" /><published>2017-03-21T00:00:00-04:00</published><updated>2017-03-21T00:00:00-04:00</updated><id>http://anthernet.com/blog/build-a-twitterbot-with-node</id><content type="html" xml:base="http://anthernet.com/blog/build-a-twitterbot-with-node/">&lt;p&gt;So I have a huge unorganized local directory of thousands of images that were scraped from Tumblr and various subreddits. The bot uses Node file system and a sorting module to randomly select an image and post it every hour. It then deletes the photo after it’s been posted so there are no duplicates. I should note that this implementation is more of a test run and that I’d like to eventually use the code for some other bots that have a more focused theme.&lt;/p&gt;

&lt;p&gt;Here’s how it works.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Twit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'twit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;shuffle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'shuffle-array'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'config.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s worth noting that in my dependencies I’m including a config.js file which stores my API keys separately. It will be passed through the tweet variable for authentication.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tweetImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Twit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Define images path&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imagesArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readdirSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./images/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Shuffle images&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imagesArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Pick random image&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imagesArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IMAGE CHOSEN: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Convert content to base64&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b64content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./images/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'base64'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Assign b64 content to tweet&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'media/upload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;media_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b64content&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The imagesArray variable is assigned to read all contents of the images directory. The array is then shuffled using the shuffle-array package which also selects a random image to which is then encoded to base64.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ERROR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'UPLOADING....'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Post tweet&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'statuses/update'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;media_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;media_id_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ERROR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
         &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'An image has successfully been posted!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Delete image after tweeting&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unlinkSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./images/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function that posts the image to Twitter is wrapped in a conditional for basic error handling. Once the image has successfully been posted, the file is deleted through node file system so that it cannot be posted again.&lt;/p&gt;

&lt;p&gt;Lastly, the tweetImage function is ran in a 1 hour interval:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tweetImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Tweets in 1 hour intervals&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;initial-troubleshooting&quot;&gt;Initial troubleshooting&lt;/h2&gt;
&lt;p&gt;Since I’m dealing with a local file directory for now, the bot is running locally and is dependent on my machine running (silly, I know). So what I’m working on doing next is uploading my image directory to Google Drive and have the bot run on a server while using Google’s Node.js client to determine the path. My first night running the bot, I went to bed and noticed it had stopped running when my computer was inactive (duh). So to fix this issue, I installed &lt;a href=&quot;https://github.com/foreverjs/forever&quot;&gt;forever&lt;/a&gt; which is a CLI tool that ensures my node server runs continuously.&lt;/p&gt;

&lt;p&gt;Here is the link to the repository via &lt;a href=&quot;https://github.com/tonyynot/random-image-tweet&quot;&gt;Github&lt;/a&gt;. A demo of the bot can be found &lt;a href=&quot;http://twitter.com/blank_waves&quot;&gt;here&lt;/a&gt;.
I found I enjoy building Twitter bots and I’d like to improve this concept to the point where it’s an account people would actually follow. Thanks for reading!&lt;/p&gt;</content><author><name>{&quot;github&quot;=&gt;&quot;tonyynot&quot;, &quot;twitter&quot;=&gt;&quot;tonecodes&quot;}</name></author><category term="tutorials," /><category term="how-to," /><category term="learning," /><category term="code," /><category term="css" /><summary type="html">So I have a huge unorganized local directory of thousands of images that were scraped from Tumblr and various subreddits. The bot uses Node file system and a sorting module to randomly select an image and post it every hour. It then deletes the photo after it’s been posted so there are no duplicates. I should note that this implementation is more of a test run and that I’d like to eventually use the code for some other bots that have a more focused theme.</summary></entry><entry><title type="html">Standardized CSS Naming Conventions with BEM</title><link href="http://anthernet.com/blog/bem-naming-convention/" rel="alternate" type="text/html" title="Standardized CSS Naming Conventions with BEM" /><published>2016-12-28T00:00:00-05:00</published><updated>2016-12-28T00:00:00-05:00</updated><id>http://anthernet.com/blog/bem-naming-convention</id><content type="html" xml:base="http://anthernet.com/blog/bem-naming-convention/">&lt;h2 id=&quot;what-is-bem&quot;&gt;What is BEM?&lt;/h2&gt;
&lt;p&gt;BEM is a CSS methodology that aims to make CSS more scalable, reusable and maintainable. The implementation varies which is why it is important to establish standards that your team can agree upon. BEM stands for Block, Element, Modifier and is focused on organizing CSS classes by breaking down a site into blocks. The naming convention used in BEM is hierarchical so understanding those conventions as a team will help optimize the front-end development process. BEM methodology demands specificity and in turn prevents having to use &lt;code&gt;!important&lt;/code&gt; which is bad practice anyway. This allows other developers working with the code to quickly and easily identify what that code is doing just by looking at its name.&lt;/p&gt;

&lt;h2 id=&quot;the-bem-structure&quot;&gt;The BEM Structure&lt;/h2&gt;
&lt;p&gt;The official BEM naming convention goes as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;    &lt;span class=&quot;nc&quot;&gt;.block&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.block--modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.block__element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.block__element--modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While the double underscores and hyphens look a little goofy at first, they actually make sense considering a name could already have more than one word such as &lt;code&gt;.sign-up&lt;/code&gt;. When using the BEM naming convention, its the double underscores or hyphens that give a visual cue to the relationship of its containing block.&lt;/p&gt;

&lt;h2 id=&quot;blocks&quot;&gt;Blocks&lt;/h2&gt;
&lt;p&gt;The first step to establishing the BEM structure is to determine what blocks require naming. The block “encapsulates a standalone entity that is meaningful on its own”&lt;a href=&quot;http://getbem.com/naming/&quot;&gt;1&lt;/a&gt;. Blocks are the standalone chunks of code that are modular and house their own set of elements. For example, the header, body, sidebar, footer and content area are all considered blocks and will have elements associated to them.&lt;/p&gt;

&lt;p&gt;The idea of a block is that it should be modular enough that it can be used across the entire site without having to modify the code in any way. For this reason, there are a couple rules to take into consideration:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Never use an ID to name blocks or elements. The specific nature of the BEM naming convention works best with classes and if ID’s are mixed in, it confuses the purpose of the BEM methodology.&lt;/li&gt;
  &lt;li&gt;Do not use positioning rules in BEM blocks. This means a block should not contain rules such as &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt; or &lt;code&gt;width&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;elements-and-modifiers&quot;&gt;Elements and Modifiers&lt;/h2&gt;
&lt;p&gt;Elements are bits of code that are associated to a block. Each element is written after the block and is connected by two underscores. All elements are working within the context of their assigned block, hence the block designation before the element name.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.block__element {}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In a more practical usage, this translates to something like this: &lt;code&gt;.navbar__tab {}&lt;/code&gt; with &lt;code&gt;navbar&lt;/code&gt; being the block and &lt;code&gt;tab&lt;/code&gt; being the element.&lt;/p&gt;

&lt;p&gt;Modifiers, simply stated, modify the state of an existing block or element. If a pre-existing block or element requires an alternate version, a modifier is used to designate that difference. For example, &lt;code&gt;navbar__tab--active&lt;/code&gt; with &lt;code&gt;active&lt;/code&gt; modifying the &lt;code&gt;tab&lt;/code&gt; element.&lt;/p&gt;

&lt;h2 id=&quot;nesting-with-sass&quot;&gt;Nesting with Sass&lt;/h2&gt;
&lt;p&gt;Elements can be nested inside each other.
You can have any number of nesting levels.
An element is always part of a block, not another element. This means that element names can’t define a hierarchy such as &lt;code&gt;block__elem1__elem2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An example of nesting in a preprocessor:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.navbar&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;....&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;__tab&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;....&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--active&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;....&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>{&quot;github&quot;=&gt;&quot;tonyynot&quot;, &quot;twitter&quot;=&gt;&quot;tonecodes&quot;}</name></author><category term="tutorials," /><category term="how-to," /><category term="learning," /><category term="code," /><category term="css" /><summary type="html">What is BEM? BEM is a CSS methodology that aims to make CSS more scalable, reusable and maintainable. The implementation varies which is why it is important to establish standards that your team can agree upon. BEM stands for Block, Element, Modifier and is focused on organizing CSS classes by breaking down a site into blocks. The naming convention used in BEM is hierarchical so understanding those conventions as a team will help optimize the front-end development process. BEM methodology demands specificity and in turn prevents having to use !important which is bad practice anyway. This allows other developers working with the code to quickly and easily identify what that code is doing just by looking at its name.</summary></entry><entry><title type="html">Link Dump 07 // Noteworthy Web Articles</title><link href="http://anthernet.com/blog/link-dump-07/" rel="alternate" type="text/html" title="Link Dump 07 // Noteworthy Web Articles" /><published>2016-09-19T00:00:00-04:00</published><updated>2016-09-19T00:00:00-04:00</updated><id>http://anthernet.com/blog/link-dump-07</id><content type="html" xml:base="http://anthernet.com/blog/link-dump-07/">&lt;p&gt;Here are some articles I’ve had bookmarked over the last few months. I thought I’d share them on here. That is all.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.isotoma.com/blog/2016/09/07/going-all-in-on-flexbox/&quot;&gt;Going All In on Flexbox&lt;/a&gt;&lt;br /&gt;
Excellent breakdown with illustrations of some common challenges and obstacles encountered when using flexbox.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/twelve-fancy-chrome-devtools-tips-dc1e39d10d9d#.rh9tb1c9g&quot;&gt;Twelve Fancy Chrome DevTools Tips&lt;/a&gt;&lt;br /&gt;
Pretty self explanatory title. A list of some really helpful Chrome Devtools tricks and tips that you may or may not know. A good start is to go and download &lt;a href=&quot;https://www.google.com/chrome/browser/canary.html&quot;&gt;Chrome Canary&lt;/a&gt; and use it for development.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ohshitgit.com/&quot;&gt;Oh shit, git!&lt;/a&gt;&lt;br /&gt;
The writer of this article shares some of the messy git situations he’s gotten himself into and what he did to get out of them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ryanwinchester.ca/posts/stop-forcing-your-arbitrary-password-rules-on-me&quot;&gt;Stop forcing your arbitrary password rules on me&lt;/a&gt;&lt;br /&gt;
Examples of extremely annoying and unnecessary security techniques with practical solutions to each one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://snipcart.com/blog/learn-vanilla-javascript-before-using-js-frameworks&quot;&gt;Learn Vanilla JavaScript Before JS Frameworks&lt;/a&gt;&lt;br /&gt;
An argument against the notion that you don’t need to know much vanilla JS to crack into one of the many JS frameworks out there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@sachagreif/the-state-of-javascript-front-end-frameworks-1a2d8a61510#.hqsm0v4ga&quot;&gt;The State of JavaScript in 2016&lt;/a&gt;&lt;br /&gt;
A research article which uses surveys and observations to help developers conclude which JS framework to learn and use. The writer does come to a conclusion at the end, so read through the article to find out.&lt;/p&gt;</content><author><name>{&quot;github&quot;=&gt;&quot;tonyynot&quot;, &quot;twitter&quot;=&gt;&quot;tonecodes&quot;}</name></author><category term="tools" /><category term="learning" /><category term="productivity" /><summary type="html">Here are some articles I’ve had bookmarked over the last few months. I thought I’d share them on here. That is all.</summary></entry><entry><title type="html">Link Dump 06 // Space Exploration Edition</title><link href="http://anthernet.com/blog/link-dump-06/" rel="alternate" type="text/html" title="Link Dump 06 // Space Exploration Edition" /><published>2016-04-23T00:00:00-04:00</published><updated>2016-04-23T00:00:00-04:00</updated><id>http://anthernet.com/blog/link-dump-06</id><content type="html" xml:base="http://anthernet.com/blog/link-dump-06/">&lt;p&gt;These are some of the many noteworthy links I’ve saved over the past few months. Going through my various bookmarks I realized I had a number of space related links so I decided to share them for a link roundup. If you are even &lt;i&gt;remotely&lt;/i&gt; interested in space related things, you should enjoy at least 1 of these sites!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://inspacewetrust.org/en/&quot;&gt;In Space We Trust&lt;/a&gt;&lt;br /&gt;
This is an interactive site that lets you relive the history of space exploration. I should warn you, it takes a little while to load but it’s well worth it. After browsing around on this site, I actually learned some interesting new facts—like in 1957 the first dog went into orbit! I wonder if he got lonely up in that space kennel.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=D-uMFHoF8VA&quot;&gt;No Man’s Sky (Preview)&lt;/a&gt;&lt;br /&gt;
I haven’t been this excited for a video game in a while. No Man’s Sky is a space survival/exploration game in which players can freely roam around an open universe which includes 18 quintillion randomly generated planets. In this video, lead developer Sean Murray gives a walkthrough explaining what it is you actually do in this game. It’s worth mentioning that the universe in the game is so expansive that 99.8% of all the planets will go undiscovered. If you don’t follow video games, just know this is pretty groundbreaking stuff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.firstmenonthemoon.com/&quot;&gt;Apollo 11 Lunar Landing in Real Time&lt;/a&gt;&lt;br /&gt;
On this site, you can watch the first moon landing in real time, with audio from Houston as well as the Lunar and Command Module. I imagine the hours of fun I’d have with this as a kid. Even as an adult I find it pretty cool as a temporary distraction. This is definitely worth checking out for a few minutes at least.&lt;br /&gt;
Bonus link: &lt;a href=&quot;http://apollo17.org/&quot;&gt;Appolo 17 in Real Time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.lightyear.fm/&quot;&gt;Lightyear.fm&lt;/a&gt;&lt;br /&gt;
&lt;!-- FIX THIS --&gt;
Here is a site where you can view many lightyears a hit song from the past has travelled. Radio broadcasts actually leave Earth at the speed of light. It’s not a site I spent a lot of time on, but I did enjoy seeing how far back I could go in space to see how far the songs travelled. It’s a pretty cool little experiment that combines music with space exploration.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bbc.com/future/bespoke/20140304-how-big-is-space-interactive/index.html&quot;&gt;How Big Is Space&lt;/a&gt;&lt;br /&gt;
Another interactive site from BBC that gives an idea of how our solar system scales to other massive occurances that have taken place on Earth. Spoiler alert: It’s bigger than you can comprehend.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Space is big. Really big. You just won’t believe how vastly, hugely, mind-bogglingly big it is. I mean, you may think it’s a long way down the road to the chemist, but that’s just peanuts to space.”
-Douglas Adams&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>{&quot;github&quot;=&gt;&quot;tonyynot&quot;, &quot;twitter&quot;=&gt;&quot;tonecodes&quot;}</name></author><category term="space" /><category term="links" /><summary type="html">These are some of the many noteworthy links I’ve saved over the past few months. Going through my various bookmarks I realized I had a number of space related links so I decided to share them for a link roundup. If you are even remotely interested in space related things, you should enjoy at least 1 of these sites!</summary></entry><entry><title type="html">How I Designed and Coded This Blog</title><link href="http://anthernet.com/blog/new-blog-design/" rel="alternate" type="text/html" title="How I Designed and Coded This Blog" /><published>2016-03-29T00:00:00-04:00</published><updated>2016-03-29T00:00:00-04:00</updated><id>http://anthernet.com/blog/new-blog-design</id><content type="html" xml:base="http://anthernet.com/blog/new-blog-design/">&lt;p&gt;It has been well over a year that I’ve been using Jekyll as a static site generator for my blog and up until now, I’ve been downloading and modifying various themes. I decided to start with a fresh base install of Jekyll and roll my own theme using Sass to process my CSS.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-jekyll-and-gulp&quot;&gt;Setting up Jekyll and Gulp&lt;/h2&gt;
&lt;p&gt;I wanted to use a task runner for my build, specifically Gulp.js to handle my Sass compiling and BrowserSync to auto refresh my changes on each save. I came across &lt;a href=&quot;https://github.com/shakyShane/jekyll-gulp-sass-browser-sync&quot;&gt;this&lt;/a&gt; Github repo which provided an excellent gulpfile with the default Jekyll build files. In order to get my build system up and running, I ran the following installations:&lt;/p&gt;

&lt;p&gt;Jekyll - &lt;code&gt;$ gem install jekyll&lt;/code&gt;&lt;br /&gt;
NodeJS - use the installer found &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
GulpJS - &lt;code&gt;$ npm install -g gulp&lt;/code&gt; (mac users should use &lt;code&gt;sudo&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;I did have to run &lt;code&gt;sudo npm install&lt;/code&gt; for each of the dependencies listed in the gulpfile. Once that was done, running a simple &lt;code&gt;gulp&lt;/code&gt; command got my Jekyll build up and running with BrowserSync and Sass compiling.&lt;/p&gt;

&lt;h2 id=&quot;installing-bourbon-and-neat&quot;&gt;Installing Bourbon and Neat&lt;/h2&gt;
&lt;p&gt;Now that I had my build system up and running, I started thinking about design and layout. All I knew was I wanted to keep both the design and code minimal. This meant no Bootstrap or Foundation. I remembered trying to use &lt;a href=&quot;http://bourbon.io&quot;&gt;Bourbon&lt;/a&gt; and the &lt;a href=&quot;http://neat.bourbon.io/&quot;&gt;Neat&lt;/a&gt; grid a while back but not understanding enough about the grid system and Sass to be able to properly implement it into my project. So I revisted Bourbon and Neat this time and was surprised with how quick and easy it is to use.&lt;/p&gt;

&lt;p&gt;Installation is as simple as running a gem install:&lt;br /&gt;
&lt;code&gt;$ gem install bourbon&lt;/code&gt;
Then loading Bourbon into the project with&lt;br /&gt; 
&lt;code&gt;$ bourbon install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Installing Neat is exactly the same&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;neat 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;neat &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside my &lt;i&gt;_scss&lt;/i&gt; folder, I created a file to store my mixins and another file to store my color and font variables. Inside my &lt;i&gt;_main.scss&lt;/i&gt;, the Bourbon and Neat .scss files are included along with &lt;i&gt;_variables.scss&lt;/i&gt; and &lt;i&gt;_mixins.scss&lt;/i&gt; at the top of the stylesheet as such:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bourbon/bourbon&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;neat/neat&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;variables&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mixins&quot;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;design--layout&quot;&gt;Design &amp;amp; Layout&lt;/h2&gt;
&lt;p&gt;With everything setup in just a few minutes, I was able to start designing with ease. Having my Gulp build system running BrowserSync, trying out new fonts, colors and grid layouts with Neat was a breeze. It actually made the design part of the build very fun for me and trying out new ideas was a lot less tedious. Using the Neat grid changed the way I approach CSS. Things like nesting pseudo elements, using variables and defining breakpoints and media queries within a class seems to be the most logical way to write CSS.&lt;/p&gt;

&lt;p&gt;Avoiding tons of nested divs with long lists of classes such as &lt;code&gt;small-12 medium-10 large-6 columns&lt;/code&gt; kept my markup semantic and clean. The Neat grid makes it as simple as using &lt;code&gt;@include span-columns(12);&lt;/code&gt; inside the class itself. For media breakpoints, just throw in &lt;code&gt;@media screen and (max-width: 887px){...}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;theming-made-easy-with-sass&quot;&gt;Theming Made Easy with Sass&lt;/h2&gt;
&lt;p&gt;When I was downloading and modifying other Jekyll themes, I found that the things I wanted to change most were font and color variations. With that in mind, I designed this site so that the colors and fonts could easily be changed without having to replace every instance of that color/font in the document. I did this by making variables targeting each property that could be modified.&lt;/p&gt;

&lt;p&gt;With my color and font variables in place, I can assign one variable for multiple classes on the page. For example, let’s say we declared &lt;code&gt;$link_color: $red&lt;/code&gt;. By having the variable &lt;code&gt;$link_color&lt;/code&gt; assigned as the color to multiple classes, changing the declared color variable will also change the color of every property where &lt;code&gt;$link_color&lt;/code&gt; is assigned instead of having to do a find/replace all.&lt;/p&gt;

&lt;p&gt;That’s all there is to it! If you have any questions or comments, feel free to &lt;a href=&quot;http://www.twitter.com/tonecodes&quot;&gt;tweet&lt;/a&gt; at me or comment below.&lt;/p&gt;</content><author><name>{&quot;github&quot;=&gt;&quot;tonyynot&quot;, &quot;twitter&quot;=&gt;&quot;tonecodes&quot;}</name></author><category term="design" /><category term="code" /><category term="jekyll" /><category term="gulp" /><category term="tutorials" /><summary type="html">It has been well over a year that I’ve been using Jekyll as a static site generator for my blog and up until now, I’ve been downloading and modifying various themes. I decided to start with a fresh base install of Jekyll and roll my own theme using Sass to process my CSS.</summary></entry></feed>